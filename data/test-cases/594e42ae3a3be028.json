{"uid":"594e42ae3a3be028","name":"test_login_with_wrong_password","fullName":"manual_login_pytest#test_login_with_wrong_password","historyId":"883451826f43254695b1d639d366cc52","time":{"start":1727066681339,"stop":1727066712329,"duration":30990},"status":"broken","statusMessage":"FileNotFoundError: [WinError 3] The system cannot find the path specified","statusTrace":"driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"c1ebea6b-fd8a-4e2d-92ba-01754b04b1e1\")>\n\n    def test_login_with_wrong_password(driver):\n        try:\n            login_page(driver)\n            driver.find_element(By.XPATH, User_Input_Xpath).send_keys(user_name)\n            driver.find_element(By.XPATH, Password_Input_Xpath).send_keys(user_password)\n            driver.find_element(By.XPATH, Login_Button_Xpath).click()\n    \n>           WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located((By.XPATH, \"//strong[normalize-space()='Error']\"))\n            )\n\nmanual_login_pytest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c1ebea6b-fd8a-4e2d-92ba-01754b04b1e1\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000002059D083CE0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\nautomation\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"c1ebea6b-fd8a-4e2d-92ba-01754b04b1e1\")>\n\n    def test_login_with_wrong_password(driver):\n        try:\n            login_page(driver)\n            driver.find_element(By.XPATH, User_Input_Xpath).send_keys(user_name)\n            driver.find_element(By.XPATH, Password_Input_Xpath).send_keys(user_password)\n            driver.find_element(By.XPATH, Login_Button_Xpath).click()\n    \n            WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located((By.XPATH, \"//strong[normalize-space()='Error']\"))\n            )\n            alert_text = driver.find_element(By.XPATH, \"//strong[normalize-space()='Error']\").text\n    \n            assert alert_text == \"Error\"\n            print(\"Invalid login with wrong password and correct username - Test passed!\")\n        except Exception as e:\n>           take_screenshot(driver, \"test_login_with_wrong_password\")\n\nmanual_login_pytest.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmanual_login_pytest.py:43: in take_screenshot\n    allure.attach.file(screenshot_path, name=\"Screenshot\", attachment_type=allure.attachment_type.PNG)\nautomation\\Lib\\site-packages\\allure_commons\\_allure.py:203: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\nautomation\\Lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nautomation\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nautomation\\Lib\\site-packages\\allure_pytest\\listener.py:256: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\nautomation\\Lib\\site-packages\\allure_commons\\reporter.py:160: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\nautomation\\Lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nautomation\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nautomation\\Lib\\site-packages\\allure_commons\\logger.py:39: in report_attached_file\n    shutil.copy2(source, destination)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = 'screenshots/test_login_with_wrong_password.png', dst = WindowsPath('E:/Automation/allure-results/7c7e0650-de51-4294-98d1-c75f78db73c6-attachment.png')\n\n    def copy2(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data and metadata. Return the file's destination.\n    \n        Metadata is copied with copystat(). Please see the copystat function\n        for more information.\n    \n        The destination may be a directory.\n    \n        If follow_symlinks is false, symlinks won't be followed. This\n        resembles GNU's \"cp -P src dst\".\n        \"\"\"\n        if os.path.isdir(dst):\n            dst = os.path.join(dst, os.path.basename(src))\n    \n        if hasattr(_winapi, \"CopyFile2\"):\n            src_ = os.fsdecode(src)\n            dst_ = os.fsdecode(dst)\n            flags = _winapi.COPY_FILE_ALLOW_DECRYPTED_DESTINATION # for compat\n            if not follow_symlinks:\n                flags |= _winapi.COPY_FILE_COPY_SYMLINK\n            try:\n>               _winapi.CopyFile2(src_, dst_, flags)\nE               FileNotFoundError: [WinError 3] The system cannot find the path specified\n\nC:\\Users\\Office\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\shutil.py:453: FileNotFoundError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1727066671839,"stop":1727066681338,"duration":9499},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"FileNotFoundError: [WinError 3] The system cannot find the path specified","statusTrace":"driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"c1ebea6b-fd8a-4e2d-92ba-01754b04b1e1\")>\n\n    def test_login_with_wrong_password(driver):\n        try:\n            login_page(driver)\n            driver.find_element(By.XPATH, User_Input_Xpath).send_keys(user_name)\n            driver.find_element(By.XPATH, Password_Input_Xpath).send_keys(user_password)\n            driver.find_element(By.XPATH, Login_Button_Xpath).click()\n    \n>           WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located((By.XPATH, \"//strong[normalize-space()='Error']\"))\n            )\n\nmanual_login_pytest.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c1ebea6b-fd8a-4e2d-92ba-01754b04b1e1\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000002059D083CE0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:511:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\nautomation\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"c1ebea6b-fd8a-4e2d-92ba-01754b04b1e1\")>\n\n    def test_login_with_wrong_password(driver):\n        try:\n            login_page(driver)\n            driver.find_element(By.XPATH, User_Input_Xpath).send_keys(user_name)\n            driver.find_element(By.XPATH, Password_Input_Xpath).send_keys(user_password)\n            driver.find_element(By.XPATH, Login_Button_Xpath).click()\n    \n            WebDriverWait(driver, 10).until(\n                EC.presence_of_element_located((By.XPATH, \"//strong[normalize-space()='Error']\"))\n            )\n            alert_text = driver.find_element(By.XPATH, \"//strong[normalize-space()='Error']\").text\n    \n            assert alert_text == \"Error\"\n            print(\"Invalid login with wrong password and correct username - Test passed!\")\n        except Exception as e:\n>           take_screenshot(driver, \"test_login_with_wrong_password\")\n\nmanual_login_pytest.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmanual_login_pytest.py:43: in take_screenshot\n    allure.attach.file(screenshot_path, name=\"Screenshot\", attachment_type=allure.attachment_type.PNG)\nautomation\\Lib\\site-packages\\allure_commons\\_allure.py:203: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\nautomation\\Lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nautomation\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nautomation\\Lib\\site-packages\\allure_pytest\\listener.py:256: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\nautomation\\Lib\\site-packages\\allure_commons\\reporter.py:160: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\nautomation\\Lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nautomation\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nautomation\\Lib\\site-packages\\allure_commons\\logger.py:39: in report_attached_file\n    shutil.copy2(source, destination)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = 'screenshots/test_login_with_wrong_password.png', dst = WindowsPath('E:/Automation/allure-results/7c7e0650-de51-4294-98d1-c75f78db73c6-attachment.png')\n\n    def copy2(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data and metadata. Return the file's destination.\n    \n        Metadata is copied with copystat(). Please see the copystat function\n        for more information.\n    \n        The destination may be a directory.\n    \n        If follow_symlinks is false, symlinks won't be followed. This\n        resembles GNU's \"cp -P src dst\".\n        \"\"\"\n        if os.path.isdir(dst):\n            dst = os.path.join(dst, os.path.basename(src))\n    \n        if hasattr(_winapi, \"CopyFile2\"):\n            src_ = os.fsdecode(src)\n            dst_ = os.fsdecode(dst)\n            flags = _winapi.COPY_FILE_ALLOW_DECRYPTED_DESTINATION # for compat\n            if not follow_symlinks:\n                flags |= _winapi.COPY_FILE_COPY_SYMLINK\n            try:\n>               _winapi.CopyFile2(src_, dst_, flags)\nE               FileNotFoundError: [WinError 3] The system cannot find the path specified\n\nC:\\Users\\Office\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\shutil.py:453: FileNotFoundError","steps":[],"attachments":[{"name":"Screenshot","type":"image/png","size":0}],"parameters":[],"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1727066712770,"stop":1727066716126,"duration":3356},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false}],"labels":[{"name":"suite","value":"manual_login_pytest"},{"name":"host","value":"DESKTOP-G36OV76"},{"name":"thread","value":"13800-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"manual_login_pytest"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"594e42ae3a3be028.json","parameterValues":[]}